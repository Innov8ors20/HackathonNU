Let's discuss part two of basics of asymptotic analysis. What we have learned so far we have discussed what is efficiency in terms of data structures. Apart from this, on what basis we could compare the time complexity of the data structures. We have learned that on the basis of operations performed on data structures, we could be able to compare the time complexity of the data structures. But the question is how to find the time complexity or running time of an operation performed on data structures. We know that on the basis of operations we would be able to compare two data structures by comparing their time complexities. But how do we able to find the time complexity or running time of an operation performed on data structures? This is the question. Let's tackle this question by using some methods. And here is method number one. Examine the exact running time. Now how to do that? Pick up some machine and turn the timer on. Run the operation for different inputs on the data structures. You want to compare one by one and see how much time a particular operation will take on these data structures. Obviously the requirement is that you need a machine and you need a timer. Maybe you just turn the timer on and what you will do is you will run the particular operation for different inputs on one data structure, then in the other data structure and so on in the same machine for the comparison purpose, of course. And then you can easily compare them because you know you have the time in your hand. You are basically running the timer. By running the timer you would be able to compare their actual times, isn't that so? So obviously you need to run the operation for different inputs on the data structures in the same machine and you just have to turn on the timer for the purpose of knowing how much time a particular data structure is taking. Right? In this way you would be able to compare data structures and obviously the one who takes less time is the best performer. For better analysis, you can compare the data structures on different machines too. But you know that there are some problems with this approach. It might be possible that for some input size, the first data structure gives the best performance, and for the other input size, the second gives the best performance. There's no way to know that. Basically, you know, if you are calculating the exact running time, it might be possible that for some input size, your first data structure is actually giving the best performance and the other data structure is giving the best performance on the other input size. And obviously it might also be possible that in some machine, for some input size of data structure, it is performing well, while in the other machine the second data structure is performing well with a different size. You know, maybe it is possible that in some machine, your first data structure is giving the best performance, while in the other machine, the other data structure is giving the best performance. Exact running time calculation is not at all practical. Let me tell you. It is not at all practical. Okay, so examining the exact running time is not the best solution to calculate the time complexity. That's what I want to tell you right now, because, you know, calculating the exact running time is not at all practical. So what is the best solution to this problem? We'll see in the next lecture.